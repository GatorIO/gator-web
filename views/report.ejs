<!DOCTYPE html>
<html lang="en">
<head>
    <% include partials/report/header %>
    <% include partials/master/header %>
    <link href="/query-builder/css/query-builder.default.css" rel="stylesheet">

    <style>
        #filter-builder .rules-group-container {
            background-color:white !important;
            border:none !important;
            padding:0 !important;
        }
    </style>
</head>
<body class="fixed-navigation">

<div id="wrapper">

    <% include partials/master/leftPanel %>

    <div id="page-wrapper" class="white-bg">

        <% include partials/master/topPanel %>

        <div id="content" class="wrapper wrapper-content" style="padding-right: 15px;">

            <div class="row white-bg">
                <% include partials/master/message %>

                <div class="col-md-12 col-lg-7">
                    <h1 id="page-title"></h1>
                    <h2 class="visible-print">Project: <%- application.api.currentProject(req).name %></h2>
                </div>
                <div class="col-md-12 col-lg-5">
                    <% include partials/report/toolbar %>
                </div>
            </div>
            <div class="row white-bg hidden-print">
                <div class="col-md-12 col-lg-6">
                    <div <%- (definition.segmentation ? '' : ' class="hidden"') %>">
                        <h4 class="text-navy">With Segments:</h4>
                        <div class="input-group">
                            <input class="form-control" id="segments" data-placeholder="Choose segments..." type="text" />
                            <span class="input-group-btn hidden-print">
                                <button title="Build your own custom segment" class="btn btn-primary" type="button" onclick="newSegment()" data-toggle="modal" data-target="#segmentModal">
                                    <i class="fa fa-plus" style="font-size:.8em"></i>
                                </button>
                            </span>
                        </div>
                    </div>

                    <br />
                </div>
                <div class="col-md-12 col-lg-12">
                    <div id="filter-builder"></div>
                </div>
            </div>
            <div class="row white-bg">
                <div class="col-lg-12">
                    <div id="results-chart"></div>
                </div>
            </div>
            <div class="row white-bg">
                <span id="results-table-container" style="visibility: hidden">
                    <div class="col-lg-12">
                        <div id="results-table" style="margin-top:15px">&nbsp;</div>
                    </div>
                </span>
            </div>
        </div>

        <% include partials/master/footer %>

    </div>
</div>

<div class="modal inmodal fade" id="segmentModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h2 class="modal-title">Define Segment</h2>
            </div>
            <div class="modal-body">
                <div class="form-group"><label>Segment Name</label>
                    <input name="segmentName" id="segmentName" placeholder="Enter segment name..." class="form-control" autocomplete="off">
                </div>
                <div id="segment-builder"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a onclick="addSegment(); return false" id="modal-create-ok" class="btn btn-primary btn-ok">OK</a>
            </div>
        </div>
    </div>
</div>

<% include partials/master/footerScripts %>
<% include partials/report/footerScripts %>
<script src="/query-builder/js/query-builder.standalone.min.js"></script>
<script src="/js/query-builder.custom.js"></script>
<script src="/typeahead/typeahead.jquery.min.js"></script>

<script>

    //  set the timezone to the user's timezone
    moment.tz.setDefault('<%- req.session.timezone.momentName %>');

    var segmentsSelectize, customCount = 0, customSegments, suppressUpdates = false, title;
    var report = new Report();
    var definition = <%- JSON.stringify(definition) %>;

    $('#page-title').html(definition.title);

    var metricSelectize = $('#metrics').selectize({
        options: <%- JSON.stringify(metricOptions) %>,
        items: Utils.replaceAll(definition.attributes, ' ', '').split(','),
        plugins: ['drag_drop','remove_button'],
        delimiter: ',',
        closeAfterSelect: true,
        onItemAdd: function () {
            this.blur();
        },
        optgroups:[{ id: 'Custom', name: 'Custom Attributes' }, { id: 'Standard', name: 'Standard Attributes' }],
        optgroupField: 'optgroup',
        optgroupLabelField: 'name',
        optgroupValueField: 'id'
    });

    var elementSelectize = $('#elements').selectize({
        options: <%- JSON.stringify(elementOptions) %>,
        items: definition.group ? Utils.replaceAll(definition.group, ' ', '').split(',') : [],
        plugins: ['drag_drop','remove_button'],
        delimiter: ',',
        closeAfterSelect: true,
        onItemAdd: function () {
            this.blur();
        },
        optgroups:[{ id: 'Custom', name: 'Custom Attributes' }, { id: 'Standard', name: 'Standard Attributes' }],
        optgroupField: 'optgroup',
        optgroupLabelField: 'name',
        optgroupValueField: 'id'
    });

    function setupSegmentSelect(items) {

        var segments = <%- JSON.stringify(segmentOptions) %>;

        segmentsSelectize = $('#segments').selectize({
            options: segments,
            items: items,
            maxItems: 6,
            dropdownParent: "body",
            plugins: ['drag_drop','remove_button'],
            delimiter: ',',
            closeAfterSelect: true,
            onItemAdd: function () {
                this.blur();
            }
        });
    }

    setupSegmentSelect([ -1000 ]);

    function newSegment() {
        $('#segment-builder').queryBuilder('reset');
        $('#segmentName').val('Custom ' + ++customCount);
    }

    function editSegment(value) {

        if (value && value.substr(0, 6) == 'custom') {
            $('#segmentName').val(customSegments[value].text);
            $('#segmentModal').modal('show');
            $('#segment-builder').queryBuilder('setRulesFromMongo', customSegments[value].query);
        }
    }

    function addSegment() {

        //  validate form data
        if (!$('#segment-builder').queryBuilder('validate'))
            return;

        customSegments = customSegments || {};

        var value = 'custom-' + customCount;
        customSegments[value] = {
            text: $('#segmentName').val(),
            query: $('#segment-builder').queryBuilder('getMongo')
        };

        segmentsSelectize[0].selectize.addOption({ value: value, text: $('#segmentName').val() });
        segmentsSelectize[0].selectize.updateOption(value, { value: value, text: customSegments[value].text });
        segmentsSelectize[0].selectize.refreshItems();
        segmentsSelectize[0].selectize.addItem(value);
        $('#segmentModal').modal('hide');
        runQuery();
    }

    function runQuery() {

        if (suppressUpdates)
            return;

        if (!Filter.validate('filter-builder'))
            return;

        if (!$('#projects').val()) {
            Page.showMessage('Please select a project.&nbsp; <a href="/setup/projects/form">Click here</a> to create a new project.');
            return;
        }

        if (!$('#metrics').val()) {
            Page.showMessage('You must select at least one metric to report on.');
        } else {

            //  set options for both chart and table
            report.pageOptions = {
                projectId: $('#projects').val(),
                chartContainer: 'results-chart',
                tableContainer: 'results-table',
                legendContainer: 'results-legend',
                onStateChange: pushState
            }

            setState();

            report.run(function(err) {

                if (!err)
                    pushState();
                else
                    Page.doneLoading();

                //  if being exported, notify service that rendering is done
                if (typeof window.callPhantom === 'function')
                    window.callPhantom({ status: 'complete' });

            });
        }
    }

    function pushState() {
        if (history.pushState) {
            history.pushState( { options: report.state, tableData: report.tableData, chartData: report.chartData }, '',
                    window.location.href.split('?')[0] + '?options=' + encodeURIComponent(JSON.stringify(report.state)))
        }
    }

    window.onpopstate = function(settings) {

        if (settings && settings.state) {
            restoreState(settings.state.options);
            report.tableData = settings.state.tableData;
            report.chartData = settings.state.chartData;
            report.render();
        }
    };

    function setState() {
        report.state.view = definition.view || 'sessions';
        report.state.title =  $('#page-title').html();
        report.state.renderView = definition.renderView || 'report';
        report.state.dateLabel = Toolbar.dateLabel;
        report.state.dateInterval = $("#reportIntervalTitle").html();
        report.state.attributes = $("#metrics").val();

        if (definition.key)
            report.state.key = definition.key;

        if (definition.hiddenSeries)
            report.state.hiddenSeries = definition.hiddenSeries;

        if (definition.tableOrder)
            report.state.tableOrder = definition.tableOrder;

        if ($("#elements").val())
            report.state.group = $("#elements").val();
        else
            delete report.state.group;

        if ($("#segments").val())
            report.state.segments = $("#segments").val();
        else
            delete report.state.segments;

        if ($("#filter-builder").queryBuilder('validate'))
            report.state.filter = $("#filter-builder").queryBuilder('getMongo');
        else
            delete report.state.filter;

        if (customCount >0) {
            report.state.customSegments = customSegments;
            report.state.customCount = customCount;
        } else {
            delete report.state.customSegments;
            delete report.state.customCount;
        }

        if (Toolbar.dateLabel == 'Custom') {
            report.state.dateStart = Toolbar.dateStart;
            report.state.dateEnd = Toolbar.dateEnd;
        } else {
            delete report.state.dateStart;
            delete report.state.dateEnd;
        }

        if (!report.state.plotKeys)
            delete report.state.plotKeys;

        if (!report.state.tableOrder)
            delete report.state.tableOrder;
    }

    function restoreState(state) {

        suppressUpdates = true;

        report.state = state;

        if (report.state.title)
            $('#page-title').html(report.state.title);

        Toolbar.setDateRange(state.dateLabel, state.dateStart, state.dateEnd, state.dateInterval);

        metricSelectize[0].selectize.clear();
        state.attributes.split(',').forEach(function(item) {metricSelectize[0].selectize.addItem(item.trim());});

        elementSelectize[0].selectize.clear();

        if (state.group)
            state.group.split(',').forEach(function(item) {elementSelectize[0].selectize.addItem(item.trim());});

        segmentsSelectize[0].selectize.clear();

        if (state.segments)
            state.segments.split(',').forEach(function(item) {segmentsSelectize[0].selectize.addItem(item.trim());});

        if (state.customSegments) {
            customSegments = state.customSegments;

            for (var key in customSegments) {

                if (customSegments.hasOwnProperty(key)) {
                    var segment = customSegments[key];
                    segmentsSelectize[0].selectize.addOption({ value: key, text: segment.text });
                    segmentsSelectize[0].selectize.addItem(key);
                }
            }
        }

        if (state.filter)
            Filter.setRules('filter-builder', state.filter);

        if (state.customCount)
            customCount = state.customCount;

        suppressUpdates = false;
    }

    var filterOptions = <%- JSON.stringify(filterOptions) %>;

    $(document).ready(function() {

        try {
            suppressUpdates = true;

            Toolbar.init(definition);

            if (definition.dateLabel || definition.dateInterval)
                Toolbar.setDateRange(definition.dateLabel, null, null, definition.dateInterval);

            Filter.init('filter-builder', '<%- settings.apiUrl %>', <%- req.session.currentProjectId %>, null, filterOptions);
            Filter.init('segment-builder', '<%- settings.apiUrl %>', <%- req.session.currentProjectId %>, null, filterOptions);

            //  'filter-builder' is part of the page and can cause updates
            Filter.configureEmbeddedFilter('filter-builder');

            //  Get options first by query string, then by definition, then by default
            var options = Utils.getParam('options', window.location.search);

            if (definition.filter && Object.keys(definition.filter).length > 0)
                Filter.setRules('filter-builder', definition.filter);

            if (options) {
                restoreState(JSON.parse(options));
            } else {
                setState();     //  set defaults
            }
            suppressUpdates = false;

            runQuery();

            $('body').on('click', 'div.items', function (e) {
                editSegment($(e.target).attr('data-value'));
            });

            //  Run query when form values are changed by the user - make sure they actually changed, since the change event fires for other reasons
            var oldSegments = $("#segments").val();

            segmentsSelectize[0].selectize.on('change', function() {

                if ($("#segments").val() != oldSegments) {
                    oldSegments = $("#segments").val();
                    runQuery();
                }
            });
        } catch(err) {
            Page.showMessage(err.message);
        }
    });

    Page.intro = {
        steps: [
            {
                intro: "This is a tour of a report page.  It will guide you through the elements on the page and what they are for.  <br><br>Click 'next' to start."
            },
            {
                element: document.querySelector('#metrics + div'),
                intro: "These are metrics to display on the table below, which are numeric attributes that can have summary operations computed on, like totals, averages, etc. For example, 'Average Session Length'." +
                "<br><br>You can drag and drop the metrics to customize the order in which they are displayed.  Also, you can click on the 'x' to remove them."
            },
            {
                element: document.querySelector('#elements + div'),
                intro: "These are attributes (generally a string or date) that reports can be grouped on. For example, 'Event Name' or 'Campaign'.  The table below will show grouping based on what you have selected here." +
                "<br><br>You can drag and drop the elements to customize the order in which they are displayed.  Also, you can click on the 'x' to remove them."
            },
            {
                element: document.querySelector('#segments + div'),
                intro: "Segments are used to compare subsets of data on the report.  For example, you may want to compare mobile sessions vs. tablet sessions.  By selecting a segment, it will be added side by side to the table and chart below."
            },
            {
                element: document.querySelector('#filter-builder'),
                intro: "This is used to filter all the data on the report.  For example, you can filter for all sessions from iPhones.  Multiple filters can be created and grouped together by logical ANDs and ORs."
            },
            {
                element: document.querySelector('#toolbar-prior'),
                intro: "By clicking on this, the report will change the timeframe one unit back.  For example, if the report is for the month of June, it will move to May and refresh."
            },
            {
                element: document.querySelector('#reportRange'),
                intro: "This lets you pick predefined timeframes, like 'Today', or 'Last 7 days'.  It also lets you select custom timeframes from the 'Custom' menu option."
            },
            {
                element: document.querySelector('#toolbar-next'),
                intro: "By clicking on this, the report will change the timeframe one unit forward.  For example, if the report is for the month of May, it will move to June and refresh."
            },
            {
                element: document.querySelector('#toolbar-interval'),
                intro: "This defines the time interval the report will be grouped on.  For example, hourly, daily or monthly.  " +
                "If the timeframe and interval match (like 'today' and 'daily'), the report will show a snapshot of the data using pie charts.  Otherwise, the report will show a trend line.",
                position: 'left'
            },
            {
                element: document.querySelector('#toolbar-refresh'),
                intro: "This button refreshes the report without reloading the whole page.",
                position: 'left'
            },
            {
                element: document.querySelector('#toolbar-dashboard'),
                intro: "This adds the current report to an existing dashboard.  The report will show up as a pod on the dashboard you select.",
                position: 'left'
            },
            {
                element: document.querySelector('#toolbar-bookmark'),
                intro: "This creates a bookmark for the current report.  The bookmark will show up on the menu's 'Bookmark' item.",
                position: 'left'
            },
            {
                element: document.querySelector('#toolbar-export'),
                intro: "This exports the report to a specific format you select, like PDF or CSV.",
                position: 'left'
            }
        ]
    };

    <% if (!req || !req.query || req.query.format != 'pdf') { %>
    if (!localStorage.reportIntroPlayed)
        Page.confirm('Take a tour?', 'Would you like a guided tour of this page?  You can always take the tour later by clicking on the "Tour Page" menu item at the bottom of the page', function() {
            Page.startIntro();
        });

    localStorage.reportIntroPlayed = true;
    <% } %>

</script>
</body>
</html>
	
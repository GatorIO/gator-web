<!DOCTYPE html>
<html lang="en">
<head>
    <% include partials/report/header %>
    <% include partials/master/header %>
    <link href="/query-builder/css/query-builder.default.css" rel="stylesheet">
    <link rel="stylesheet" href="/jvectormap/jquery-jvectormap-2.0.4.css" type="text/css" media="screen"/>

    <style>
        #filter-builder .rules-group-container {
            background-color:white !important;
            border:none !important;
            padding: 0 0 0 0 !important;
        }
    </style>
</head>
<body class="fixed-navigation">

<div id="wrapper">

    <% include partials/master/leftPanel %>

    <div id="page-wrapper" class="gray-bg">

        <% include partials/master/topPanel %>

        <div id="content" class="wrapper wrapper-content" style="padding-right: 15px;">

            <div class="row white-bg">
                <% include partials/master/message %>

                <div class="col-md-4">
                    <h1 id="page-title"></h1>
                    <h2 class="visible-print">Project: <%- application.api.currentProject(req).name %></h2>
                </div>
                <div class="col-md-8">
                    <% include partials/report/toolbar-log %>
                </div>
            </div>
            <div class="row white-bg hidden-print">
                <div class="col-md-6">

                    <h4 class="text-navy">Show Attributes:</h4>
                    <input class="form-control" id="attribs" data-placeholder="Choose attributes, like location, browser, page views..." type="text">
                    <br><h4 class="text-navy">Filter:</h4>
                    <div id="filter-builder"></div>
                    <br />
                </div>
                <div class="col-md-6">
                    <!-- map goes here -->
                    <div id="world-map" style="width:100%; height: 270px; margin-top: 15px"></div>
                </div>
            </div>
            <div class="row white-bg">
                <span id="results-table-container" style="visibility: hidden">
                    <div class="col-lg-12">
                        <div id="results-table" style="margin-top:15px">&nbsp;</div>
                    </div>
                </span>
            </div>
        </div>

        <% include partials/master/footer %>

    </div>
</div>

<% include partials/master/footerScripts %>
<% include partials/report/footerScripts %>
<script src="/query-builder/js/query-builder.standalone.min.js"></script>
<script src="/js/query-builder.custom.js"></script>
<script src="/typeahead/typeahead.jquery.min.js"></script>
<script src="/jvectormap/jquery-jvectormap-2.0.4.min.js"></script>
<script src="/jvectormap/jquery-jvectormap-world-mill.js"></script>
<script type="text/javascript" src="/js/yaml.min.js"></script>

<script>
    var segmentsSelectize, customCount = 0, customSegments, suppressUpdates = false;
    var report = new Report();
    var definition = <%- JSON.stringify(definition) %>;

    //  set up page options based on the data view (sessions, events or pages)
    switch (definition.view) {
        case 'sessions':
            definition.title = definition.title || 'Session Log';
            definition.attributes = definition.attributes || 'lastAccess,sessionDateTime,sessionNumber';
            break;
        case 'events':
            definition.title = definition.title || 'Event Log';
            definition.attributes = definition.attributes || 'eventDateTime,eventName,uniqueId,organization,revenue,event';
            break;
        case 'people':
            definition.title = definition.title || 'People Log';
            definition.attributes = definition.attributes || 'sessions';
            break;
    }

    var attribSelectize = $('#attribs').selectize({
        options: <%- JSON.stringify(attribOptions) %>,
        items: Utils.replaceAll(definition.attributes, ' ', '').split(','),
        plugins: ['drag_drop','remove_button'],
        delimiter: ',',
        closeAfterSelect: true,
        onItemAdd: function () {
            this.blur();
        },
        optgroups:[{ id: 'Custom', name: 'Custom Attributes' }, { id: 'Standard', name: 'Standard Attributes' }],
        optgroupField: 'optgroup',
        optgroupLabelField: 'name',
        optgroupValueField: 'id'
    });

    function runQuery() {

        if (suppressUpdates)
            return;

        if (!Filter.validate('filter-builder'))
            return;

        if (!$('#projects').val()) {
            Page.showMessage('Please select a project.&nbsp; <a href="/setup/projects/form">Click here</a> to create a new project.');
            return;
        }

        if (!$('#attribs').val()) {
            Page.showMessage('You must select at least one attribute to report on.');
        } else {

            //  set options for both chart and table
            report.pageOptions = {
                projectId: $('#projects').val(),
                timezone: '<%- req.session.user.timezoneId %>',
                tableContainer: 'results-table',
                mapContainer: 'world-map',
                onStateChange: pushState
            }

            setState();

            report.run(function(err) {

                if (!err)
                    pushState();
                else
                    Page.doneLoading();

                //  if being exported, notify service that rendering is done
                if (typeof window.callPhantom === 'function')
                    window.callPhantom({ status: 'complete' });
            });
        }
    }

    function pushState() {
        if (history.pushState) {
            history.pushState( { options: report.state, tableData: report.tableData, chartData: report.chartData }, '',
                    window.location.href.split('?')[0] + '?options=' + encodeURIComponent(JSON.stringify(report.state)))
        }
    }

    window.onpopstate = function(settings) {

        if (settings && settings.state) {
            restoreState(settings.state.options);
            report.tableData = settings.state.tableData;
            report.render();
        }
    };

    function setState() {
        report.state.view = definition.view || 'sessions';
        report.state.title =  $('#page-title').html();
        report.state.renderView = definition.renderView || 'report';
        report.state.isLog = true;
        report.state.pageLength = 100;

        switch (report.state.view) {
            case 'sessions':
                report.state.sort = { 'lastAccess': -1 };
                break;
            case 'events':
                report.state.sort = { 'eventDateTime': -1 };
                break;
            case 'people':
                report.state.sort = { 'pageDateTime': -1 };
                break;
        }
        report.state.dateLabel = Toolbar.dateLabel;
        report.state.attributes = $("#attribs").val();

        if (Toolbar.dateLabel == 'Custom') {
            report.state.dateStart = Toolbar.dateStart;
            report.state.dateEnd = Toolbar.dateEnd;
        } else {
            delete report.state.dateStart;
            delete report.state.dateEnd;
        }

        if (!report.state.tableOrder)
            delete report.state.tableOrder;

        if ($("#filter-builder").queryBuilder('validate'))
            report.state.filter = $("#filter-builder").queryBuilder('getMongo');
        else
            delete report.state.filter;
    }

    function restoreState(state) {

        suppressUpdates = true;

        report.state = state;

        if (report.state.title)
            $('#page-title').html(report.state.title);

        Toolbar.setDateRange(state.dateLabel, state.dateStart, state.dateEnd, state.dateInterval);

        attribSelectize[0].selectize.clear();
        state.attributes.split(',').forEach(function(item) {attribSelectize[0].selectize.addItem(item.trim());});

        if (state.filter)
            Filter.setRules('filter-builder', state.filter);

        suppressUpdates = false;
    }

    var filterOptions = <%- JSON.stringify(filterOptions) %>;

    $(document).ready(function() {
        try {

            Toolbar.initLog();

            if (definition.dateLabel || definition.dateInterval)
                Toolbar.setDateRange(definition.dateLabel, null, null, definition.dateInterval);

            Filter.init('filter-builder', '<%- settings.apiUrl %>', <%- req.session.currentProjectId %>, null, filterOptions);

            //  'filter-builder' is part of the page and can cause updates
            Filter.configureEmbeddedFilter('filter-builder');

            var options = Utils.getParam('options', window.location.search);

            //  Set initial items based on definition
            $('#page-title').html(definition.title);

            if (definition.filter)
                Filter.setRules('filter-builder', definition.filter);

            if (options) {
                restoreState(JSON.parse(options));
            } else {
                setState();     //  set defaults
            }

            runQuery();

            //  Run query when form values are changed by the user - make sure they actually changed, since the change event fires for other reasons
            var oldAttribs = $("#attribs").val(), oldSegments = $("#segments").val();

            attribSelectize[0].selectize.on('change', function() {

                if ($("#attribs").val() != oldAttribs) {
                    oldAttribs = $("#attribs").val();
                    runQuery();
                }
            });
        } catch(err) {
            Page.showMessage(err.message);
        }
    });
</script>
</body>
</html>
	